{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#what-is-source-wand","title":"What is source-wand?","text":"<p><code>source-wand</code> is a tool for large scale analysis and replication of open-source projects.</p> <p>Specifically, it serves two main purposes:</p> <ol> <li>Generating the dependency tree of open-source projects</li> <li>Doing a deep copy of open-source projects along with their dependencies</li> </ol> <p><code>source-wand</code> is language agnostic: you will get the results in the same format irrespective of language.</p> <p>Here is an overview of the supported languages</p>"},{"location":"#in-this-documentation","title":"In this documentation","text":"Tutorials How-to guides Learn source-wand with step-by-step tutorials. Find how to achieve your goals with how-to guides. Explanations References Understand source-wand concepts with detailed explanations. Easily access facts about source-wand with references."},{"location":"supported-languages/","title":"Supported languages","text":"<p>You will find below the list of supported languages with support level for each feature.</p> Language Dependency analysis Replication Go Yes Yes Java (Maven) Partial No"},{"location":"tutorials/0-all/","title":"All tutorials","text":"<p>Here are tutorials that will guide you through the features of source-wand from installation to full deep replication of a project:</p> <ol> <li>Installing source-wand</li> <li>Analyzing dependencies</li> <li>Replicating a project</li> </ol>"},{"location":"tutorials/1-installing-source-wand/","title":"Installing source-wand","text":""},{"location":"tutorials/1-installing-source-wand/#ubuntu","title":"Ubuntu","text":""},{"location":"tutorials/1-installing-source-wand/#using-the-snap","title":"Using the Snap","text":"<p>The easiest way to install <code>source-wand</code> is to use the <code>snap</code>.</p> <pre><code>sudo snap install source-wand --edge\n</code></pre> <p>Note that the present version of <code>source-wand</code> is on the <code>edge</code> risk. This means that there is not yet a guarantee of retrocompatibility between revisions.</p> <p>When the API becomes stable enough, the <code>snap</code> will be promoted to <code>beta</code>, then to <code>stable</code>.</p> <p>Next tutorial: Analyzing dependencies</p>"},{"location":"tutorials/2-analyzing-dependencies/","title":"Analyzing dependencies","text":"<p>The first fundamental use case for <code>source-wand</code> is to analyze the dependencies of an open-source project. At the most basic level, <code>source-wand</code> will generate a tree of the dependencies of your project.</p> <p>Then, you can format and alter the analysis to:  - Get a flat list of unique dependency/version pairs  - Get the minimal set of dependencies required to build your project</p>"},{"location":"tutorials/2-analyzing-dependencies/#generating-a-dependency-tree","title":"Generating a dependency tree","text":"<p>If you want to generate the dependency tree of a project, run the following command. In this case, we are assuming the project you are analyzing is https://github.com/canonical/chisel. <pre><code>source-wand dependencies git https://github.com/canonical/chisel\n</code></pre></p> <p>This will clone the repository, detect which language/build system is used (Golang in this case) and run the right commands to generate the dependency tree. Finally, it pases that tree into a format that is common for all languages so that the output can be formatted as detailed in the next sections in the same way for all languges.</p>"},{"location":"tutorials/2-analyzing-dependencies/#formatting-a-dependency-tree","title":"Formatting a dependency tree","text":"<p>You can use the <code>--format [json|yaml]</code> on the <code>dependencies</code> command to convert the tree into either <code>json</code> or <code>yaml</code>.</p> <p>For example, to get <code>json</code>: <pre><code>source-wand dependencies --format=json git https://github.com/canonical/chisel\n</code></pre></p> <p>Or to get <code>yaml</code>: <pre><code>source-wand dependencies --format=yaml git https://github.com/canonical/chisel\n</code></pre></p>"},{"location":"tutorials/2-analyzing-dependencies/#flattening-a-dependency-tree","title":"Flattening a dependency tree","text":"<p>When you generate the full dependency tree, it is possible that multiple transitive dependencies depend on the same other dependency. In that case, the full tree will contain deplicates.</p> <p>Furthermore, if you want to simply iterate over all dependencies using a tree, you need to use a tree traversal algorithm which can be overkill for many situations.</p> <p>Using the <code>--flatten</code> flag can solve these problems.</p> <p>Run the following to generate a unique list of dependency name/version pairs. <pre><code>source-wand dependencies --flatten git https://github.com/canonical/chisel\n</code></pre></p> <p>You can combine <code>--flatten</code> with <code>--format</code>: <pre><code>source-wand dependencies --flatten --format=json\n</code></pre></p>"},{"location":"tutorials/2-analyzing-dependencies/#generating-the-minimal-set-of-dependencies-required-to-build","title":"Generating the minimal set of dependencies required to build","text":"<p>Generating the full dependency tree can give you a great first impression of the dependency situation of a given project. However, sometimes not all dependencies are used in the build process.</p> <p>This is the case for Golang, which selects only one version per dependency following the MVS algorithm.</p> <p>Instead of using the <code>--flatten</code> flag, which will give you unique pairs of dependency name/version, use: <pre><code>source-wand dependencies --minimal-build-requirements git https://github.com/canonical/chisel\n</code></pre></p> <p>This will return only the dependencies that are actually used in the build process.</p> <p>You can also combine <code>--minimal-build-requirements</code> with <code>--format</code>: <pre><code>source-wand dependencies --minimal-build-requirements --format=json git https://github.com/canonical/chisel\n</code></pre></p> <p>Next tutorial: Replicating a project</p>"},{"location":"tutorials/3-replicating-a-project/","title":"Replicating a project","text":"<p>Once you have analyzed the dependency tree of your project, you may want to own a deep copy of the project (including its dependencies).</p> <p>Reasons you may want to do this are many, here are a few examples:  - You want to fully control the build pipeline of your packages so that there can be no supply chain attack  - You want to customize your packages and produce in-house versions of them  - You want to patch CVEs on the packages you use and produce patches binaries to consume</p>"},{"location":"tutorials/3-replicating-a-project/#creating-a-replication-project","title":"Creating a replication project","text":"<p>To replicate a project along with its dependencies, you need to define a replication manifest. That manifest can be stored anywhere. For example, you can create a git repository where you store your replicatoin manifests for different project. This way, you can share them with your team and they can run them independently.</p> <p>To create a replication manifest, you can run: <pre><code>source-wand replication init\n</code></pre></p> <p>\u26a0\ufe0f This command will soon be deprecated in favor of: <pre><code>source-wand init\n</code></pre></p> <p>This will create a <code>replication.yaml</code> file in your working directory.</p> <p>You can also create it yourself, here is the format of this file: <pre><code>project: chisel\n\norigin:\n  git: https://github.com/canonical/chisel\n  reference: refs/tags/v0.9.1\n\ndestination_template:\n  git: git+ssh://&lt;path-to-a-git-organization&gt;/replicated-$NAME\n  reference: $VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH$VERSION_SUFFIX\n</code></pre></p>"},{"location":"tutorials/3-replicating-a-project/#origin","title":"Origin","text":"<p>The origin is a pointer to the project you want to replicate, use the <code>git</code> attribute to point to the repository of the project and use the <code>reference</code> attribute to tell <code>source-wand</code> which reference (commit, tag or branch) to checkout.</p>"},{"location":"tutorials/3-replicating-a-project/#destination-template","title":"Destination template","text":"<p>The destination template defines where the project needs to be replicated. It is a template so you can use variables that come from the individual packages (top-level project and all dependencies). This template will be applied to all packages (top-level and dependencies).</p> <p>Here are the variables that are available to you:  - <code>$NAME</code> the name of the package  - <code>$VERSION</code> the version of the package  - <code>$VERSION_MAJOR</code> the major version of the package (assuming scemantic versioning) i.e. <code>3.4.2</code> -&gt; <code>3</code>  - <code>$VERSION_MINOR</code> the minor version of the package (assuming scemantic versioning) i.e. <code>3.4.2</code> -&gt; <code>4</code>  - <code>$VERSION_PATCH</code> the patch version of the package (assuming scemantic versioning) i.e. <code>3.4.2</code> -&gt; <code>2</code>  - <code>$VERSION_SUFFIX</code> the suffix of the version string i.e. <code>3.4.2-20250408</code> -&gt; <code>-20250408</code>  - <code>$VERSION_RETROCOMPATIBLE</code> the shortest expression of the version that has retrocompatibility guarantee according to scemantic versioning i.e. <code>3.4.2</code> -&gt; <code>3</code>, but <code>0.5.0</code> -&gt; <code>0.5.0</code></p> <p>Use these variables to define the destination template, the <code>git</code> attribute is the repository URL you want for the package and the <code>reference</code> is the branch that will be created in the repository.</p>"},{"location":"tutorials/3-replicating-a-project/#using-a-specific-git-identity","title":"Using a specific git identity","text":"<p>You may want to use a specific git identity. To do that, add the following to your <code>replication.yaml</code>:</p> <pre><code>config:\n  git_identity:\n    username: my_username\n    email: my_username@my_company.com\n</code></pre> <p>The username and email you put here will be used as git identity when creating the repository and pushing to git.</p>"},{"location":"tutorials/3-replicating-a-project/#doing-the-replication","title":"Doing the replication","text":"<p>Once you created your replication manifest, you can run the following in the directory where the manifest is located:</p> <pre><code>source-wand replication apply\n</code></pre> <p>\u26a0\ufe0f This command will soon be deprecated in favor of: <pre><code>source-wand apply\n</code></pre></p> <p>This will run the dependency analysis to list the dependencies that you need to build the project and it will replicate all of them along with the top-level project according to your template.</p>"}]}